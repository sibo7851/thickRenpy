/* Generated by Cython 0.29.21 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE___renpysteam
#define __PYX_HAVE_API___renpysteam
/* Early includes */
#include "steam/steam_api.h"
#include "steamcallbacks.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "_renpysteam.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__ENotificationPosition(enum ENotificationPosition value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__EOverlayToStoreFlag(enum EOverlayToStoreFlag value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32(int32 value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64(uint64 value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32(uint32 value);

/* CIntFromPy.proto */
static CYTHON_INLINE uint32 __Pyx_PyInt_As_uint32(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int32 __Pyx_PyInt_As_int32(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE AppId_t __Pyx_PyInt_As_AppId_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum ENotificationPosition __Pyx_PyInt_As_enum__ENotificationPosition(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum EOverlayToStoreFlag __Pyx_PyInt_As_enum__EOverlayToStoreFlag(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from '_renpysteam' */
static HAuthTicket __pyx_v_11_renpysteam_h_ticket;
#define __Pyx_MODULE_NAME "_renpysteam"
extern int __pyx_module_is_main__renpysteam;
int __pyx_module_is_main__renpysteam = 0;

/* Implementation of '_renpysteam' */
static const char __pyx_k_i[] = "i";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_na[] = "na";
static const char __pyx_k_rv[] = "rv";
static const char __pyx_k_url[] = "url";
static const char __pyx_k_done[] = "done";
static const char __pyx_k_flag[] = "flag";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_appid[] = "appid";
static const char __pyx_k_renpy[] = "renpy";
static const char __pyx_k_total[] = "total";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_config[] = "config";
static const char __pyx_k_dialog[] = "dialog";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_ticket[] = "ticket";
static const char __pyx_k_version[] = "version";
static const char __pyx_k_periodic[] = "periodic";
static const char __pyx_k_position[] = "position";
static const char __pyx_k_STORE_NONE[] = "STORE_NONE";
static const char __pyx_k_renpysteam[] = "_renpysteam";
static const char __pyx_k_ticket_buf[] = "ticket_buf";
static const char __pyx_k_ticket_len[] = "ticket_len";
static const char __pyx_k_initialized[] = "initialized";
static const char __pyx_k_install_dlc[] = "install_dlc";
static const char __pyx_k_store_stats[] = "store_stats";
static const char __pyx_k_cur_progress[] = "cur_progress";
static const char __pyx_k_dlc_progress[] = "dlc_progress";
static const char __pyx_k_get_int_stat[] = "get_int_stat";
static const char __pyx_k_max_progress[] = "max_progress";
static const char __pyx_k_set_int_stat[] = "set_int_stat";
static const char __pyx_k_cancel_ticket[] = "cancel_ticket";
static const char __pyx_k_dlc_installed[] = "dlc_installed";
static const char __pyx_k_uninstall_dlc[] = "uninstall_dlc";
static const char __pyx_k_get_account_id[] = "get_account_id";
static const char __pyx_k_get_float_stat[] = "get_float_stat";
static const char __pyx_k_renpysteam_pyx[] = "_renpysteam.pyx";
static const char __pyx_k_retrieve_stats[] = "retrieve_stats";
static const char __pyx_k_set_float_stat[] = "set_float_stat";
static const char __pyx_k_get_achievement[] = "get_achievement";
static const char __pyx_k_activate_overlay[] = "activate_overlay";
static const char __pyx_k_get_persona_name[] = "get_persona_name";
static const char __pyx_k_POSITION_TOP_LEFT[] = "POSITION_TOP_LEFT";
static const char __pyx_k_STORE_ADD_TO_CART[] = "STORE_ADD_TO_CART";
static const char __pyx_k_clear_achievement[] = "clear_achievement";
static const char __pyx_k_grant_achievement[] = "grant_achievement";
static const char __pyx_k_is_subscribed_app[] = "is_subscribed_app";
static const char __pyx_k_list_achievements[] = "list_achievements";
static const char __pyx_k_POSITION_TOP_RIGHT[] = "POSITION_TOP_RIGHT";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_get_session_ticket[] = "get_session_ticket";
static const char __pyx_k_is_overlay_enabled[] = "is_overlay_enabled";
static const char __pyx_k_periodic_callbacks[] = "periodic_callbacks";
static const char __pyx_k_POSITION_BOTTOM_LEFT[] = "POSITION_BOTTOM_LEFT";
static const char __pyx_k_POSITION_BOTTOM_RIGHT[] = "POSITION_BOTTOM_RIGHT";
static const char __pyx_k_get_current_beta_name[] = "get_current_beta_name";
static const char __pyx_k_get_steam_ui_language[] = "get_steam_ui_language";
static const char __pyx_k_overlay_needs_present[] = "overlay_needs_present";
static const char __pyx_k_needs_redraw_callbacks[] = "needs_redraw_callbacks";
static const char __pyx_k_activate_overlay_to_store[] = "activate_overlay_to_store";
static const char __pyx_k_get_current_game_language[] = "get_current_game_language";
static const char __pyx_k_STORE_ADD_TO_CART_AND_SHOW[] = "STORE_ADD_TO_CART_AND_SHOW";
static const char __pyx_k_activate_overlay_to_web_page[] = "activate_overlay_to_web_page";
static const char __pyx_k_indicate_achievement_progress[] = "indicate_achievement_progress";
static const char __pyx_k_set_overlay_notification_positio[] = "set_overlay_notification_position";
static PyObject *__pyx_n_s_POSITION_BOTTOM_LEFT;
static PyObject *__pyx_n_s_POSITION_BOTTOM_RIGHT;
static PyObject *__pyx_n_s_POSITION_TOP_LEFT;
static PyObject *__pyx_n_s_POSITION_TOP_RIGHT;
static PyObject *__pyx_n_s_STORE_ADD_TO_CART;
static PyObject *__pyx_n_s_STORE_ADD_TO_CART_AND_SHOW;
static PyObject *__pyx_n_s_STORE_NONE;
static PyObject *__pyx_n_s_activate_overlay;
static PyObject *__pyx_n_s_activate_overlay_to_store;
static PyObject *__pyx_n_s_activate_overlay_to_web_page;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_appid;
static PyObject *__pyx_n_s_cancel_ticket;
static PyObject *__pyx_n_s_clear_achievement;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_config;
static PyObject *__pyx_n_s_cur_progress;
static PyObject *__pyx_n_s_dialog;
static PyObject *__pyx_n_s_dlc_installed;
static PyObject *__pyx_n_s_dlc_progress;
static PyObject *__pyx_n_s_done;
static PyObject *__pyx_n_s_flag;
static PyObject *__pyx_n_s_get_account_id;
static PyObject *__pyx_n_s_get_achievement;
static PyObject *__pyx_n_s_get_current_beta_name;
static PyObject *__pyx_n_s_get_current_game_language;
static PyObject *__pyx_n_s_get_float_stat;
static PyObject *__pyx_n_s_get_int_stat;
static PyObject *__pyx_n_s_get_persona_name;
static PyObject *__pyx_n_s_get_session_ticket;
static PyObject *__pyx_n_s_get_steam_ui_language;
static PyObject *__pyx_n_s_grant_achievement;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indicate_achievement_progress;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_initialized;
static PyObject *__pyx_n_s_install_dlc;
static PyObject *__pyx_n_s_is_overlay_enabled;
static PyObject *__pyx_n_s_is_subscribed_app;
static PyObject *__pyx_n_s_list_achievements;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_progress;
static PyObject *__pyx_n_s_na;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_needs_redraw_callbacks;
static PyObject *__pyx_n_s_overlay_needs_present;
static PyObject *__pyx_n_s_periodic;
static PyObject *__pyx_n_s_periodic_callbacks;
static PyObject *__pyx_n_s_position;
static PyObject *__pyx_n_s_renpy;
static PyObject *__pyx_n_s_renpysteam;
static PyObject *__pyx_kp_s_renpysteam_pyx;
static PyObject *__pyx_n_s_retrieve_stats;
static PyObject *__pyx_n_s_rv;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_set_float_stat;
static PyObject *__pyx_n_s_set_int_stat;
static PyObject *__pyx_n_s_set_overlay_notification_positio;
static PyObject *__pyx_n_s_store_stats;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_ticket;
static PyObject *__pyx_n_s_ticket_buf;
static PyObject *__pyx_n_s_ticket_len;
static PyObject *__pyx_n_s_total;
static PyObject *__pyx_n_s_uninstall_dlc;
static PyObject *__pyx_n_s_url;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_pf_11_renpysteam_retrieve_stats(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_2store_stats(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_4list_achievements(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_6get_achievement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_11_renpysteam_8grant_achievement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_11_renpysteam_10clear_achievement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_11_renpysteam_12indicate_achievement_progress(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_cur_progress, PyObject *__pyx_v_max_progress); /* proto */
static PyObject *__pyx_pf_11_renpysteam_14get_float_stat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_11_renpysteam_16set_float_stat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_11_renpysteam_18get_int_stat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_11_renpysteam_20set_int_stat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_11_renpysteam_22is_subscribed_app(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid); /* proto */
static PyObject *__pyx_pf_11_renpysteam_24get_current_game_language(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_26get_steam_ui_language(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_28get_current_beta_name(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_30dlc_installed(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid); /* proto */
static PyObject *__pyx_pf_11_renpysteam_32install_dlc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid); /* proto */
static PyObject *__pyx_pf_11_renpysteam_34uninstall_dlc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid); /* proto */
static PyObject *__pyx_pf_11_renpysteam_36dlc_progress(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid); /* proto */
static PyObject *__pyx_pf_11_renpysteam_38is_overlay_enabled(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_40overlay_needs_present(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_42set_overlay_notification_position(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_position); /* proto */
static PyObject *__pyx_pf_11_renpysteam_44activate_overlay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dialog); /* proto */
static PyObject *__pyx_pf_11_renpysteam_46activate_overlay_to_web_page(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_url); /* proto */
static PyObject *__pyx_pf_11_renpysteam_48activate_overlay_to_store(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid, PyObject *__pyx_v_flag); /* proto */
static PyObject *__pyx_pf_11_renpysteam_50get_persona_name(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_52get_account_id(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_54get_session_ticket(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_56cancel_ticket(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_58periodic(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_11_renpysteam_60init(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_int_2;
static PyObject *__pyx_k_;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__55;
/* Late includes */

/* "_renpysteam.pyx":144
 * #     new SteamCallback[UserStatsReceived_t](call_got_stats)
 * 
 * def retrieve_stats():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_1retrieve_stats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_retrieve_stats[] = "\n    :doc: steam_stats\n\n    Retrieves achievements and statistics from Steam.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_1retrieve_stats = {"retrieve_stats", (PyCFunction)__pyx_pw_11_renpysteam_1retrieve_stats, METH_NOARGS, __pyx_doc_11_renpysteam_retrieve_stats};
static PyObject *__pyx_pw_11_renpysteam_1retrieve_stats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("retrieve_stats (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_retrieve_stats(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_retrieve_stats(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("retrieve_stats", 0);

  /* "_renpysteam.pyx":158
 * #     got_stats = callback
 * 
 *     SteamUserStats().RequestCurrentStats()             # <<<<<<<<<<<<<<
 * 
 * def store_stats():
 */
  (void)(SteamUserStats()->RequestCurrentStats());

  /* "_renpysteam.pyx":144
 * #     new SteamCallback[UserStatsReceived_t](call_got_stats)
 * 
 * def retrieve_stats():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":160
 *     SteamUserStats().RequestCurrentStats()
 * 
 * def store_stats():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_3store_stats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_2store_stats[] = "\n    :doc: steam_stats\n\n    Stores statistics and achievements on the Steam server.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_3store_stats = {"store_stats", (PyCFunction)__pyx_pw_11_renpysteam_3store_stats, METH_NOARGS, __pyx_doc_11_renpysteam_2store_stats};
static PyObject *__pyx_pw_11_renpysteam_3store_stats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("store_stats (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_2store_stats(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_2store_stats(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("store_stats", 0);

  /* "_renpysteam.pyx":167
 *     """
 * 
 *     SteamUserStats().StoreStats()             # <<<<<<<<<<<<<<
 * 
 * def list_achievements():
 */
  (void)(SteamUserStats()->StoreStats());

  /* "_renpysteam.pyx":160
 *     SteamUserStats().RequestCurrentStats()
 * 
 * def store_stats():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":169
 *     SteamUserStats().StoreStats()
 * 
 * def list_achievements():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_5list_achievements(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_4list_achievements[] = "\n    :doc: steam_stats\n\n    Returns a list of achievement names.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_5list_achievements = {"list_achievements", (PyCFunction)__pyx_pw_11_renpysteam_5list_achievements, METH_NOARGS, __pyx_doc_11_renpysteam_4list_achievements};
static PyObject *__pyx_pw_11_renpysteam_5list_achievements(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_achievements (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_4list_achievements(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_4list_achievements(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_rv = NULL;
  int __pyx_v_na;
  char *__pyx_v_s;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_achievements", 0);

  /* "_renpysteam.pyx":176
 *     """
 * 
 *     rv = [ ]             # <<<<<<<<<<<<<<
 * 
 *     cdef int na = SteamUserStats().GetNumAchievements()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rv = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "_renpysteam.pyx":178
 *     rv = [ ]
 * 
 *     cdef int na = SteamUserStats().GetNumAchievements()             # <<<<<<<<<<<<<<
 *     cdef char *s
 *     cdef int i
 */
  __pyx_v_na = SteamUserStats()->GetNumAchievements();

  /* "_renpysteam.pyx":182
 *     cdef int i
 * 
 *     for 0 <= i < na:             # <<<<<<<<<<<<<<
 *         s = <char *> SteamUserStats().GetAchievementName(i)
 *         rv.append(s)
 */
  __pyx_t_2 = __pyx_v_na;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "_renpysteam.pyx":183
 * 
 *     for 0 <= i < na:
 *         s = <char *> SteamUserStats().GetAchievementName(i)             # <<<<<<<<<<<<<<
 *         rv.append(s)
 * 
 */
    __pyx_v_s = ((char *)SteamUserStats()->GetAchievementName(__pyx_v_i));

    /* "_renpysteam.pyx":184
 *     for 0 <= i < na:
 *         s = <char *> SteamUserStats().GetAchievementName(i)
 *         rv.append(s)             # <<<<<<<<<<<<<<
 * 
 *     return rv
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_rv, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "_renpysteam.pyx":186
 *         rv.append(s)
 * 
 *     return rv             # <<<<<<<<<<<<<<
 * 
 * def get_achievement(name):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_rv);
  __pyx_r = __pyx_v_rv;
  goto __pyx_L0;

  /* "_renpysteam.pyx":169
 *     SteamUserStats().StoreStats()
 * 
 * def list_achievements():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_renpysteam.list_achievements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":188
 *     return rv
 * 
 * def get_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_7get_achievement(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_11_renpysteam_6get_achievement[] = "\n    :doc: steam_stats\n\n    Gets the state of the achievements with `name`. This returns True if the\n    achievement has been granted, False if it hasn't, and None if the achievement\n    is unknown or an error occurs.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_7get_achievement = {"get_achievement", (PyCFunction)__pyx_pw_11_renpysteam_7get_achievement, METH_O, __pyx_doc_11_renpysteam_6get_achievement};
static PyObject *__pyx_pw_11_renpysteam_7get_achievement(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_achievement (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_6get_achievement(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_6get_achievement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  bool __pyx_v_rv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_achievement", 0);

  /* "_renpysteam.pyx":199
 *     cdef bool rv
 * 
 *     if not SteamUserStats().GetAchievement(name, &rv):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 199, __pyx_L1_error)
  __pyx_t_2 = ((!(SteamUserStats()->GetAchievement(__pyx_t_1, (&__pyx_v_rv)) != 0)) != 0);
  if (__pyx_t_2) {

    /* "_renpysteam.pyx":200
 * 
 *     if not SteamUserStats().GetAchievement(name, &rv):
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     return rv
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "_renpysteam.pyx":199
 *     cdef bool rv
 * 
 *     if not SteamUserStats().GetAchievement(name, &rv):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "_renpysteam.pyx":202
 *         return None
 * 
 *     return rv             # <<<<<<<<<<<<<<
 * 
 * def grant_achievement(name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_rv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":188
 *     return rv
 * 
 * def get_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_renpysteam.get_achievement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":204
 *     return rv
 * 
 * def grant_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_9grant_achievement(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_11_renpysteam_8grant_achievement[] = "\n    :doc: steam_stats\n\n    Grants the achievement with `name`. Call :func:`_renpysteam.store_stats` to\n    push this change to the server.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_9grant_achievement = {"grant_achievement", (PyCFunction)__pyx_pw_11_renpysteam_9grant_achievement, METH_O, __pyx_doc_11_renpysteam_8grant_achievement};
static PyObject *__pyx_pw_11_renpysteam_9grant_achievement(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("grant_achievement (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_8grant_achievement(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_8grant_achievement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("grant_achievement", 0);

  /* "_renpysteam.pyx":212
 *     """
 * 
 *     return SteamUserStats().SetAchievement(name)             # <<<<<<<<<<<<<<
 * 
 * def clear_achievement(name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(SteamUserStats()->SetAchievement(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":204
 *     return rv
 * 
 * def grant_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_renpysteam.grant_achievement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":214
 *     return SteamUserStats().SetAchievement(name)
 * 
 * def clear_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_11clear_achievement(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_11_renpysteam_10clear_achievement[] = "\n    :doc: steam_stats\n\n    Clears the achievement with `name`. Call :func:`_renpysteam.store_stats` to\n    push this change to the server.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_11clear_achievement = {"clear_achievement", (PyCFunction)__pyx_pw_11_renpysteam_11clear_achievement, METH_O, __pyx_doc_11_renpysteam_10clear_achievement};
static PyObject *__pyx_pw_11_renpysteam_11clear_achievement(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_achievement (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_10clear_achievement(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_10clear_achievement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_achievement", 0);

  /* "_renpysteam.pyx":222
 *     """
 * 
 *     return SteamUserStats().ClearAchievement(name)             # <<<<<<<<<<<<<<
 * 
 * def indicate_achievement_progress(name, cur_progress, max_progress):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(SteamUserStats()->ClearAchievement(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":214
 *     return SteamUserStats().SetAchievement(name)
 * 
 * def clear_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_renpysteam.clear_achievement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":224
 *     return SteamUserStats().ClearAchievement(name)
 * 
 * def indicate_achievement_progress(name, cur_progress, max_progress):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_13indicate_achievement_progress(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11_renpysteam_12indicate_achievement_progress[] = "\n    :doc: steam_stats\n\n    Indicates achievement progress to the user. This does *not* unlock the\n    achievement.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_13indicate_achievement_progress = {"indicate_achievement_progress", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11_renpysteam_13indicate_achievement_progress, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11_renpysteam_12indicate_achievement_progress};
static PyObject *__pyx_pw_11_renpysteam_13indicate_achievement_progress(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_cur_progress = 0;
  PyObject *__pyx_v_max_progress = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("indicate_achievement_progress (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_cur_progress,&__pyx_n_s_max_progress,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cur_progress)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("indicate_achievement_progress", 1, 3, 3, 1); __PYX_ERR(0, 224, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_progress)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("indicate_achievement_progress", 1, 3, 3, 2); __PYX_ERR(0, 224, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "indicate_achievement_progress") < 0)) __PYX_ERR(0, 224, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = values[0];
    __pyx_v_cur_progress = values[1];
    __pyx_v_max_progress = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("indicate_achievement_progress", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_renpysteam.indicate_achievement_progress", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11_renpysteam_12indicate_achievement_progress(__pyx_self, __pyx_v_name, __pyx_v_cur_progress, __pyx_v_max_progress);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_12indicate_achievement_progress(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_cur_progress, PyObject *__pyx_v_max_progress) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  uint32 __pyx_t_2;
  uint32 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("indicate_achievement_progress", 0);

  /* "_renpysteam.pyx":232
 *     """
 * 
 *     return SteamUserStats().IndicateAchievementProgress(name, cur_progress, max_progress)             # <<<<<<<<<<<<<<
 * 
 * def get_float_stat(name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_uint32(__pyx_v_cur_progress); if (unlikely((__pyx_t_2 == ((uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_uint32(__pyx_v_max_progress); if (unlikely((__pyx_t_3 == ((uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyBool_FromLong(SteamUserStats()->IndicateAchievementProgress(__pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":224
 *     return SteamUserStats().ClearAchievement(name)
 * 
 * def indicate_achievement_progress(name, cur_progress, max_progress):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_renpysteam.indicate_achievement_progress", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":234
 *     return SteamUserStats().IndicateAchievementProgress(name, cur_progress, max_progress)
 * 
 * def get_float_stat(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_15get_float_stat(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_11_renpysteam_14get_float_stat[] = "\n    :doc: steam_stats\n\n    Returns the value of the stat with `name`, or None if no such stat\n    exits.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_15get_float_stat = {"get_float_stat", (PyCFunction)__pyx_pw_11_renpysteam_15get_float_stat, METH_O, __pyx_doc_11_renpysteam_14get_float_stat};
static PyObject *__pyx_pw_11_renpysteam_15get_float_stat(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_float_stat (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_14get_float_stat(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_14get_float_stat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  float __pyx_v_rv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_float_stat", 0);

  /* "_renpysteam.pyx":244
 *     cdef float rv
 * 
 *     if not SteamUserStats().GetStat(<char *> name, &rv):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_t_2 = ((!(SteamUserStats()->GetStat(((char *)__pyx_t_1), (&__pyx_v_rv)) != 0)) != 0);
  if (__pyx_t_2) {

    /* "_renpysteam.pyx":245
 * 
 *     if not SteamUserStats().GetStat(<char *> name, &rv):
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     return rv
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "_renpysteam.pyx":244
 *     cdef float rv
 * 
 *     if not SteamUserStats().GetStat(<char *> name, &rv):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "_renpysteam.pyx":247
 *         return None
 * 
 *     return rv             # <<<<<<<<<<<<<<
 * 
 * def set_float_stat(name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_rv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":234
 *     return SteamUserStats().IndicateAchievementProgress(name, cur_progress, max_progress)
 * 
 * def get_float_stat(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_renpysteam.get_float_stat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":249
 *     return rv
 * 
 * def set_float_stat(name, value):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_17set_float_stat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11_renpysteam_16set_float_stat[] = "\n    :doc: steam_stats\n\n    Sets the value of the stat with `name`, which must have the type of\n    FLOAT. Call :func:`_renpysteam.store_stats` to push this change to the\n    server.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_17set_float_stat = {"set_float_stat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11_renpysteam_17set_float_stat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11_renpysteam_16set_float_stat};
static PyObject *__pyx_pw_11_renpysteam_17set_float_stat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_float_stat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_float_stat", 1, 2, 2, 1); __PYX_ERR(0, 249, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_float_stat") < 0)) __PYX_ERR(0, 249, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_float_stat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 249, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_renpysteam.set_float_stat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11_renpysteam_16set_float_stat(__pyx_self, __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_16set_float_stat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  float __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_float_stat", 0);

  /* "_renpysteam.pyx":258
 *     """
 * 
 *     cdef float v = value             # <<<<<<<<<<<<<<
 * 
 *     return SteamUserStats().SetStat(<char *> name, v)
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_v_v = __pyx_t_1;

  /* "_renpysteam.pyx":260
 *     cdef float v = value
 * 
 *     return SteamUserStats().SetStat(<char *> name, v)             # <<<<<<<<<<<<<<
 * 
 * def get_int_stat(name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyBool_FromLong(SteamUserStats()->SetStat(((char *)__pyx_t_2), __pyx_v_v)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":249
 *     return rv
 * 
 * def set_float_stat(name, value):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_renpysteam.set_float_stat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":262
 *     return SteamUserStats().SetStat(<char *> name, v)
 * 
 * def get_int_stat(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_19get_int_stat(PyObject *__pyx_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_11_renpysteam_18get_int_stat[] = "\n    :doc: steam_stats\n\n    Returns the value of the stat with `name`, or None if no such stat\n    exits.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_19get_int_stat = {"get_int_stat", (PyCFunction)__pyx_pw_11_renpysteam_19get_int_stat, METH_O, __pyx_doc_11_renpysteam_18get_int_stat};
static PyObject *__pyx_pw_11_renpysteam_19get_int_stat(PyObject *__pyx_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_int_stat (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_18get_int_stat(__pyx_self, ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_18get_int_stat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name) {
  int32 __pyx_v_rv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_int_stat", 0);

  /* "_renpysteam.pyx":272
 *     cdef int32 rv
 * 
 *     if not SteamUserStats().GetStat(<char *> name, &rv):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_t_2 = ((!(SteamUserStats()->GetStat(((char *)__pyx_t_1), (&__pyx_v_rv)) != 0)) != 0);
  if (__pyx_t_2) {

    /* "_renpysteam.pyx":273
 * 
 *     if not SteamUserStats().GetStat(<char *> name, &rv):
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     return rv
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "_renpysteam.pyx":272
 *     cdef int32 rv
 * 
 *     if not SteamUserStats().GetStat(<char *> name, &rv):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "_renpysteam.pyx":275
 *         return None
 * 
 *     return rv             # <<<<<<<<<<<<<<
 * 
 * def set_int_stat(name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int32(__pyx_v_rv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":262
 *     return SteamUserStats().SetStat(<char *> name, v)
 * 
 * def get_int_stat(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_renpysteam.get_int_stat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":277
 *     return rv
 * 
 * def set_int_stat(name, value):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_21set_int_stat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11_renpysteam_20set_int_stat[] = "\n    :doc: steam_stats\n\n    Sets the value of the stat with `name`, which must have the type of\n    INT. Call :func:`_renpysteam.store_stats` to push this change to the\n    server.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_21set_int_stat = {"set_int_stat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11_renpysteam_21set_int_stat, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11_renpysteam_20set_int_stat};
static PyObject *__pyx_pw_11_renpysteam_21set_int_stat(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_int_stat (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_int_stat", 1, 2, 2, 1); __PYX_ERR(0, 277, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_int_stat") < 0)) __PYX_ERR(0, 277, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_int_stat", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_renpysteam.set_int_stat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11_renpysteam_20set_int_stat(__pyx_self, __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_20set_int_stat(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  int32 __pyx_v_v;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int32 __pyx_t_1;
  char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_int_stat", 0);

  /* "_renpysteam.pyx":286
 *     """
 * 
 *     cdef int32 v = value             # <<<<<<<<<<<<<<
 * 
 *     return SteamUserStats().SetStat(<char *> name, v)
 */
  __pyx_t_1 = __Pyx_PyInt_As_int32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L1_error)
  __pyx_v_v = __pyx_t_1;

  /* "_renpysteam.pyx":288
 *     cdef int32 v = value
 * 
 *     return SteamUserStats().SetStat(<char *> name, v)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_AsWritableString(__pyx_v_name); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyBool_FromLong(SteamUserStats()->SetStat(((char *)__pyx_t_2), __pyx_v_v)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":277
 *     return rv
 * 
 * def set_int_stat(name, value):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_renpysteam.set_int_stat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":293
 * ########################################################################### Apps
 * 
 * def is_subscribed_app(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_23is_subscribed_app(PyObject *__pyx_self, PyObject *__pyx_v_appid); /*proto*/
static char __pyx_doc_11_renpysteam_22is_subscribed_app[] = "\n    :doc: steam_apps\n\n    Returns true if the user owns the app with `appid`, and false otherwise.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_23is_subscribed_app = {"is_subscribed_app", (PyCFunction)__pyx_pw_11_renpysteam_23is_subscribed_app, METH_O, __pyx_doc_11_renpysteam_22is_subscribed_app};
static PyObject *__pyx_pw_11_renpysteam_23is_subscribed_app(PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_subscribed_app (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_22is_subscribed_app(__pyx_self, ((PyObject *)__pyx_v_appid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_22is_subscribed_app(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  AppId_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_subscribed_app", 0);

  /* "_renpysteam.pyx":300
 *     """
 * 
 *     return SteamApps().BIsSubscribedApp(appid)             # <<<<<<<<<<<<<<
 * 
 * def get_current_game_language():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_AppId_t(__pyx_v_appid); if (unlikely((__pyx_t_1 == ((AppId_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(SteamApps()->BIsSubscribedApp(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":293
 * ########################################################################### Apps
 * 
 * def is_subscribed_app(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_renpysteam.is_subscribed_app", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":302
 *     return SteamApps().BIsSubscribedApp(appid)
 * 
 * def get_current_game_language():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_25get_current_game_language(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_24get_current_game_language[] = "\n    :doc: steam_apps\n\n    Return the name of the language the user has selected.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_25get_current_game_language = {"get_current_game_language", (PyCFunction)__pyx_pw_11_renpysteam_25get_current_game_language, METH_NOARGS, __pyx_doc_11_renpysteam_24get_current_game_language};
static PyObject *__pyx_pw_11_renpysteam_25get_current_game_language(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_current_game_language (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_24get_current_game_language(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_24get_current_game_language(CYTHON_UNUSED PyObject *__pyx_self) {
  char const *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_current_game_language", 0);

  /* "_renpysteam.pyx":309
 *     """
 * 
 *     cdef const char *s = SteamApps().GetCurrentGameLanguage()             # <<<<<<<<<<<<<<
 *     return str(s)
 * 
 */
  __pyx_v_s = SteamApps()->GetCurrentGameLanguage();

  /* "_renpysteam.pyx":310
 * 
 *     cdef const char *s = SteamApps().GetCurrentGameLanguage()
 *     return str(s)             # <<<<<<<<<<<<<<
 * 
 * def get_steam_ui_language():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":302
 *     return SteamApps().BIsSubscribedApp(appid)
 * 
 * def get_current_game_language():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_renpysteam.get_current_game_language", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":312
 *     return str(s)
 * 
 * def get_steam_ui_language():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_27get_steam_ui_language(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_26get_steam_ui_language[] = "\n    :doc: steam_apps\n\n    Return the name of the language the steam UI is using.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_27get_steam_ui_language = {"get_steam_ui_language", (PyCFunction)__pyx_pw_11_renpysteam_27get_steam_ui_language, METH_NOARGS, __pyx_doc_11_renpysteam_26get_steam_ui_language};
static PyObject *__pyx_pw_11_renpysteam_27get_steam_ui_language(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_steam_ui_language (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_26get_steam_ui_language(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_26get_steam_ui_language(CYTHON_UNUSED PyObject *__pyx_self) {
  char const *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_steam_ui_language", 0);

  /* "_renpysteam.pyx":319
 *     """
 * 
 *     cdef const char *s = SteamUtils().GetSteamUILanguage()             # <<<<<<<<<<<<<<
 *     return str(s)
 * 
 */
  __pyx_v_s = SteamUtils()->GetSteamUILanguage();

  /* "_renpysteam.pyx":320
 * 
 *     cdef const char *s = SteamUtils().GetSteamUILanguage()
 *     return str(s)             # <<<<<<<<<<<<<<
 * 
 * def get_current_beta_name():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":312
 *     return str(s)
 * 
 * def get_steam_ui_language():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_renpysteam.get_steam_ui_language", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":322
 *     return str(s)
 * 
 * def get_current_beta_name():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_29get_current_beta_name(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_28get_current_beta_name[] = "\n    :doc: steam_apps\n\n    Returns the name of the current beta, or None if it can't.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_29get_current_beta_name = {"get_current_beta_name", (PyCFunction)__pyx_pw_11_renpysteam_29get_current_beta_name, METH_NOARGS, __pyx_doc_11_renpysteam_28get_current_beta_name};
static PyObject *__pyx_pw_11_renpysteam_29get_current_beta_name(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_current_beta_name (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_28get_current_beta_name(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_28get_current_beta_name(CYTHON_UNUSED PyObject *__pyx_self) {
  char __pyx_v_rv[0x100];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_current_beta_name", 0);

  /* "_renpysteam.pyx":331
 *     cdef char rv[256]
 * 
 *     if not SteamApps().GetCurrentBetaName(rv, 256):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((!(SteamApps()->GetCurrentBetaName(__pyx_v_rv, 0x100) != 0)) != 0);
  if (__pyx_t_1) {

    /* "_renpysteam.pyx":332
 * 
 *     if not SteamApps().GetCurrentBetaName(rv, 256):
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     return str(rv)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "_renpysteam.pyx":331
 *     cdef char rv[256]
 * 
 *     if not SteamApps().GetCurrentBetaName(rv, 256):             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "_renpysteam.pyx":334
 *         return None
 * 
 *     return str(rv)             # <<<<<<<<<<<<<<
 * 
 * def dlc_installed(appid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_FromString(__pyx_v_rv); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":322
 *     return str(s)
 * 
 * def get_current_beta_name():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_renpysteam.get_current_beta_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":336
 *     return str(rv)
 * 
 * def dlc_installed(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_31dlc_installed(PyObject *__pyx_self, PyObject *__pyx_v_appid); /*proto*/
static char __pyx_doc_11_renpysteam_30dlc_installed[] = "\n    :doc: steam_apps\n\n    Returns True if `dlc` is installed, or False otherwise.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_31dlc_installed = {"dlc_installed", (PyCFunction)__pyx_pw_11_renpysteam_31dlc_installed, METH_O, __pyx_doc_11_renpysteam_30dlc_installed};
static PyObject *__pyx_pw_11_renpysteam_31dlc_installed(PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dlc_installed (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_30dlc_installed(__pyx_self, ((PyObject *)__pyx_v_appid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_30dlc_installed(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  AppId_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dlc_installed", 0);

  /* "_renpysteam.pyx":343
 *     """
 * 
 *     return SteamApps().BIsDlcInstalled(appid)             # <<<<<<<<<<<<<<
 * 
 * def install_dlc(appid): # , callback):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_AppId_t(__pyx_v_appid); if (unlikely((__pyx_t_1 == ((AppId_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(SteamApps()->BIsDlcInstalled(__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":336
 *     return str(rv)
 * 
 * def dlc_installed(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_renpysteam.dlc_installed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":345
 *     return SteamApps().BIsDlcInstalled(appid)
 * 
 * def install_dlc(appid): # , callback):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_33install_dlc(PyObject *__pyx_self, PyObject *__pyx_v_appid); /*proto*/
static char __pyx_doc_11_renpysteam_32install_dlc[] = "\n    :doc: steam_apps\n\n    Requests the DLC with `appid` be installed.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_33install_dlc = {"install_dlc", (PyCFunction)__pyx_pw_11_renpysteam_33install_dlc, METH_O, __pyx_doc_11_renpysteam_32install_dlc};
static PyObject *__pyx_pw_11_renpysteam_33install_dlc(PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("install_dlc (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_32install_dlc(__pyx_self, ((PyObject *)__pyx_v_appid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_32install_dlc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  AppId_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("install_dlc", 0);

  /* "_renpysteam.pyx":358
 *     """
 * 
 *     SteamApps().InstallDLC(appid)             # <<<<<<<<<<<<<<
 * 
 * def uninstall_dlc(appid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_AppId_t(__pyx_v_appid); if (unlikely((__pyx_t_1 == ((AppId_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L1_error)
  SteamApps()->InstallDLC(__pyx_t_1);

  /* "_renpysteam.pyx":345
 *     return SteamApps().BIsDlcInstalled(appid)
 * 
 * def install_dlc(appid): # , callback):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_renpysteam.install_dlc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":360
 *     SteamApps().InstallDLC(appid)
 * 
 * def uninstall_dlc(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_35uninstall_dlc(PyObject *__pyx_self, PyObject *__pyx_v_appid); /*proto*/
static char __pyx_doc_11_renpysteam_34uninstall_dlc[] = "\n    :doc: steam_apps\n\n    Requests that the DLC with `appid` be uninstalled.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_35uninstall_dlc = {"uninstall_dlc", (PyCFunction)__pyx_pw_11_renpysteam_35uninstall_dlc, METH_O, __pyx_doc_11_renpysteam_34uninstall_dlc};
static PyObject *__pyx_pw_11_renpysteam_35uninstall_dlc(PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("uninstall_dlc (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_34uninstall_dlc(__pyx_self, ((PyObject *)__pyx_v_appid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_34uninstall_dlc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  AppId_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("uninstall_dlc", 0);

  /* "_renpysteam.pyx":367
 *     """
 * 
 *     SteamApps().UninstallDLC(appid)             # <<<<<<<<<<<<<<
 * 
 * def dlc_progress(appid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_AppId_t(__pyx_v_appid); if (unlikely((__pyx_t_1 == ((AppId_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 367, __pyx_L1_error)
  SteamApps()->UninstallDLC(__pyx_t_1);

  /* "_renpysteam.pyx":360
 *     SteamApps().InstallDLC(appid)
 * 
 * def uninstall_dlc(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_renpysteam.uninstall_dlc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":369
 *     SteamApps().UninstallDLC(appid)
 * 
 * def dlc_progress(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_37dlc_progress(PyObject *__pyx_self, PyObject *__pyx_v_appid); /*proto*/
static char __pyx_doc_11_renpysteam_36dlc_progress[] = "\n    :doc: steam_apps\n\n    Reports the progress towards DLC download completion.\n\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_37dlc_progress = {"dlc_progress", (PyCFunction)__pyx_pw_11_renpysteam_37dlc_progress, METH_O, __pyx_doc_11_renpysteam_36dlc_progress};
static PyObject *__pyx_pw_11_renpysteam_37dlc_progress(PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dlc_progress (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_36dlc_progress(__pyx_self, ((PyObject *)__pyx_v_appid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_36dlc_progress(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid) {
  uint64 __pyx_v_done;
  uint64 __pyx_v_total;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  AppId_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dlc_progress", 0);

  /* "_renpysteam.pyx":377
 *     """
 * 
 *     cdef uint64 done = 0             # <<<<<<<<<<<<<<
 *     cdef uint64 total = 0
 * 
 */
  __pyx_v_done = 0;

  /* "_renpysteam.pyx":378
 * 
 *     cdef uint64 done = 0
 *     cdef uint64 total = 0             # <<<<<<<<<<<<<<
 * 
 *     if SteamApps().GetDlcDownloadProgress(appid, &done, &total):
 */
  __pyx_v_total = 0;

  /* "_renpysteam.pyx":380
 *     cdef uint64 total = 0
 * 
 *     if SteamApps().GetDlcDownloadProgress(appid, &done, &total):             # <<<<<<<<<<<<<<
 *         return done, total
 *     else:
 */
  __pyx_t_1 = __Pyx_PyInt_As_AppId_t(__pyx_v_appid); if (unlikely((__pyx_t_1 == ((AppId_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 380, __pyx_L1_error)
  __pyx_t_2 = (SteamApps()->GetDlcDownloadProgress(__pyx_t_1, (&__pyx_v_done), (&__pyx_v_total)) != 0);
  if (__pyx_t_2) {

    /* "_renpysteam.pyx":381
 * 
 *     if SteamApps().GetDlcDownloadProgress(appid, &done, &total):
 *         return done, total             # <<<<<<<<<<<<<<
 *     else:
 *         return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_uint64(__pyx_v_done); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_uint64(__pyx_v_total); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "_renpysteam.pyx":380
 *     cdef uint64 total = 0
 * 
 *     if SteamApps().GetDlcDownloadProgress(appid, &done, &total):             # <<<<<<<<<<<<<<
 *         return done, total
 *     else:
 */
  }

  /* "_renpysteam.pyx":383
 *         return done, total
 *     else:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "_renpysteam.pyx":369
 *     SteamApps().UninstallDLC(appid)
 * 
 * def dlc_progress(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_renpysteam.dlc_progress", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":388
 * ######################################################################## Overlay
 * 
 * def is_overlay_enabled():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_39is_overlay_enabled(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_38is_overlay_enabled[] = "\n    :doc: steam_overlay\n\n    Returns true if the steam overlay is enabled. (This might take a while to\n    return true once the game starts.)\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_39is_overlay_enabled = {"is_overlay_enabled", (PyCFunction)__pyx_pw_11_renpysteam_39is_overlay_enabled, METH_NOARGS, __pyx_doc_11_renpysteam_38is_overlay_enabled};
static PyObject *__pyx_pw_11_renpysteam_39is_overlay_enabled(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_overlay_enabled (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_38is_overlay_enabled(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_38is_overlay_enabled(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_overlay_enabled", 0);

  /* "_renpysteam.pyx":396
 *     """
 * 
 *     return SteamUtils().IsOverlayEnabled()             # <<<<<<<<<<<<<<
 * 
 * def overlay_needs_present():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(SteamUtils()->IsOverlayEnabled()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":388
 * ######################################################################## Overlay
 * 
 * def is_overlay_enabled():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_renpysteam.is_overlay_enabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":398
 *     return SteamUtils().IsOverlayEnabled()
 * 
 * def overlay_needs_present():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_41overlay_needs_present(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_40overlay_needs_present[] = "\n    :doc: steam_overlay\n\n    Returns true if the steam overlay is enabled. (This might take a while to\n    return true once the game starts.)\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_41overlay_needs_present = {"overlay_needs_present", (PyCFunction)__pyx_pw_11_renpysteam_41overlay_needs_present, METH_NOARGS, __pyx_doc_11_renpysteam_40overlay_needs_present};
static PyObject *__pyx_pw_11_renpysteam_41overlay_needs_present(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlay_needs_present (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_40overlay_needs_present(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_40overlay_needs_present(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlay_needs_present", 0);

  /* "_renpysteam.pyx":406
 *     """
 * 
 *     return SteamUtils().BOverlayNeedsPresent()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(SteamUtils()->BOverlayNeedsPresent()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":398
 *     return SteamUtils().IsOverlayEnabled()
 * 
 * def overlay_needs_present():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_renpysteam.overlay_needs_present", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":414
 * POSITION_BOTTOM_RIGHT = k_EPositionBottomRight
 * 
 * def set_overlay_notification_position(position):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_43set_overlay_notification_position(PyObject *__pyx_self, PyObject *__pyx_v_position); /*proto*/
static char __pyx_doc_11_renpysteam_42set_overlay_notification_position[] = "\n    :doc: steam_overlay\n\n    Sets the position of the steam overlay. `Position` should be one of\n    _renpysteam.POSTION_TOP_LEFT, .POSITION_TOP_RIGHT, .POSITION_BOTTOM_LEFT,\n    or .POSITION_BOTTOM_RIGHT.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_43set_overlay_notification_position = {"set_overlay_notification_position", (PyCFunction)__pyx_pw_11_renpysteam_43set_overlay_notification_position, METH_O, __pyx_doc_11_renpysteam_42set_overlay_notification_position};
static PyObject *__pyx_pw_11_renpysteam_43set_overlay_notification_position(PyObject *__pyx_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_overlay_notification_position (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_42set_overlay_notification_position(__pyx_self, ((PyObject *)__pyx_v_position));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_42set_overlay_notification_position(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_position) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  enum ENotificationPosition __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_overlay_notification_position", 0);

  /* "_renpysteam.pyx":423
 *     """
 * 
 *     SteamUtils().SetOverlayNotificationPosition(position)             # <<<<<<<<<<<<<<
 * 
 * def activate_overlay(dialog):
 */
  __pyx_t_1 = ((enum ENotificationPosition)__Pyx_PyInt_As_enum__ENotificationPosition(__pyx_v_position)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
  SteamUtils()->SetOverlayNotificationPosition(__pyx_t_1);

  /* "_renpysteam.pyx":414
 * POSITION_BOTTOM_RIGHT = k_EPositionBottomRight
 * 
 * def set_overlay_notification_position(position):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_renpysteam.set_overlay_notification_position", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":425
 *     SteamUtils().SetOverlayNotificationPosition(position)
 * 
 * def activate_overlay(dialog):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_45activate_overlay(PyObject *__pyx_self, PyObject *__pyx_v_dialog); /*proto*/
static char __pyx_doc_11_renpysteam_44activate_overlay[] = "\n    :doc: steam_overlay\n\n    Activates the Steam overlay.\n\n    `dialog`\n        The dialog to open the overlay to. One of \"Friends\", \"Community\",\n        \"Players\", \"Settings\", \"OfficialGameGroup\", \"Stats\", \"Achievements\"\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_45activate_overlay = {"activate_overlay", (PyCFunction)__pyx_pw_11_renpysteam_45activate_overlay, METH_O, __pyx_doc_11_renpysteam_44activate_overlay};
static PyObject *__pyx_pw_11_renpysteam_45activate_overlay(PyObject *__pyx_self, PyObject *__pyx_v_dialog) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("activate_overlay (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_44activate_overlay(__pyx_self, ((PyObject *)__pyx_v_dialog));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_44activate_overlay(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dialog) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("activate_overlay", 0);

  /* "_renpysteam.pyx":436
 *     """
 * 
 *     SteamFriends().ActivateGameOverlay(dialog)             # <<<<<<<<<<<<<<
 * 
 * def activate_overlay_to_web_page(url):
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_dialog); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 436, __pyx_L1_error)
  SteamFriends()->ActivateGameOverlay(__pyx_t_1);

  /* "_renpysteam.pyx":425
 *     SteamUtils().SetOverlayNotificationPosition(position)
 * 
 * def activate_overlay(dialog):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_renpysteam.activate_overlay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":438
 *     SteamFriends().ActivateGameOverlay(dialog)
 * 
 * def activate_overlay_to_web_page(url):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_47activate_overlay_to_web_page(PyObject *__pyx_self, PyObject *__pyx_v_url); /*proto*/
static char __pyx_doc_11_renpysteam_46activate_overlay_to_web_page[] = "\n    :doc: steam_overlay\n\n    Activates the Steam overlay, and opens the web page at `url`.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_47activate_overlay_to_web_page = {"activate_overlay_to_web_page", (PyCFunction)__pyx_pw_11_renpysteam_47activate_overlay_to_web_page, METH_O, __pyx_doc_11_renpysteam_46activate_overlay_to_web_page};
static PyObject *__pyx_pw_11_renpysteam_47activate_overlay_to_web_page(PyObject *__pyx_self, PyObject *__pyx_v_url) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("activate_overlay_to_web_page (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_46activate_overlay_to_web_page(__pyx_self, ((PyObject *)__pyx_v_url));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_46activate_overlay_to_web_page(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_url) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("activate_overlay_to_web_page", 0);

  /* "_renpysteam.pyx":445
 *     """
 * 
 *     SteamFriends().ActivateGameOverlayToWebPage(url)             # <<<<<<<<<<<<<<
 * 
 * STORE_NONE = k_EOverlayToStoreFlag_None
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_url); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)
  SteamFriends()->ActivateGameOverlayToWebPage(__pyx_t_1);

  /* "_renpysteam.pyx":438
 *     SteamFriends().ActivateGameOverlay(dialog)
 * 
 * def activate_overlay_to_web_page(url):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_renpysteam.activate_overlay_to_web_page", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":451
 * STORE_ADD_TO_CART_AND_SHOW = k_EOverlayToStoreFlag_AddToCartAndShow
 * 
 * def activate_overlay_to_store(appid, flag=STORE_NONE):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_49activate_overlay_to_store(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_11_renpysteam_48activate_overlay_to_store[] = "\n    :doc: steam_overlay\n\n    Opens the steam overlay to the store.\n\n    `appid`\n        The appid to open.\n\n    `flag`\n        One of _renpysteam.STORE_NONE, .STORE_ADD_TO_CART, or .STORE_ADD_TO_CART_AND_SHOW.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_49activate_overlay_to_store = {"activate_overlay_to_store", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11_renpysteam_49activate_overlay_to_store, METH_VARARGS|METH_KEYWORDS, __pyx_doc_11_renpysteam_48activate_overlay_to_store};
static PyObject *__pyx_pw_11_renpysteam_49activate_overlay_to_store(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_appid = 0;
  PyObject *__pyx_v_flag = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("activate_overlay_to_store (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_appid,&__pyx_n_s_flag,0};
    PyObject* values[2] = {0,0};
    values[1] = __pyx_k_;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_appid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flag);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "activate_overlay_to_store") < 0)) __PYX_ERR(0, 451, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_appid = values[0];
    __pyx_v_flag = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("activate_overlay_to_store", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 451, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_renpysteam.activate_overlay_to_store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11_renpysteam_48activate_overlay_to_store(__pyx_self, __pyx_v_appid, __pyx_v_flag);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_48activate_overlay_to_store(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_appid, PyObject *__pyx_v_flag) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  AppId_t __pyx_t_1;
  enum EOverlayToStoreFlag __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("activate_overlay_to_store", 0);

  /* "_renpysteam.pyx":464
 *     """
 * 
 *     SteamFriends().ActivateGameOverlayToStore(appid, flag)             # <<<<<<<<<<<<<<
 * 
 * ########################################################################### User
 */
  __pyx_t_1 = __Pyx_PyInt_As_AppId_t(__pyx_v_appid); if (unlikely((__pyx_t_1 == ((AppId_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L1_error)
  __pyx_t_2 = ((enum EOverlayToStoreFlag)__Pyx_PyInt_As_enum__EOverlayToStoreFlag(__pyx_v_flag)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L1_error)
  SteamFriends()->ActivateGameOverlayToStore(__pyx_t_1, __pyx_t_2);

  /* "_renpysteam.pyx":451
 * STORE_ADD_TO_CART_AND_SHOW = k_EOverlayToStoreFlag_AddToCartAndShow
 * 
 * def activate_overlay_to_store(appid, flag=STORE_NONE):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_renpysteam.activate_overlay_to_store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":468
 * ########################################################################### User
 * 
 * def get_persona_name():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_51get_persona_name(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_50get_persona_name[] = "\n    :doc: steam_user\n\n    Returns the user's publicly-visible name.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_51get_persona_name = {"get_persona_name", (PyCFunction)__pyx_pw_11_renpysteam_51get_persona_name, METH_NOARGS, __pyx_doc_11_renpysteam_50get_persona_name};
static PyObject *__pyx_pw_11_renpysteam_51get_persona_name(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_persona_name (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_50get_persona_name(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_50get_persona_name(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_persona_name", 0);

  /* "_renpysteam.pyx":475
 *     """
 * 
 *     return SteamFriends().GetPersonaName().decode("utf-8")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = SteamFriends()->GetPersonaName();
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":468
 * ########################################################################### User
 * 
 * def get_persona_name():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_renpysteam.get_persona_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":478
 * 
 * 
 * def get_account_id():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_53get_account_id(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_52get_account_id[] = "\n    :doc: steam_user\n\n    Returns the user's account ID.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_53get_account_id = {"get_account_id", (PyCFunction)__pyx_pw_11_renpysteam_53get_account_id, METH_NOARGS, __pyx_doc_11_renpysteam_52get_account_id};
static PyObject *__pyx_pw_11_renpysteam_53get_account_id(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_account_id (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_52get_account_id(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_52get_account_id(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_account_id", 0);

  /* "_renpysteam.pyx":485
 *     """
 * 
 *     return SteamUser().GetSteamID().GetAccountID()             # <<<<<<<<<<<<<<
 * 
 * cdef HAuthTicket h_ticket = 0
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32(SteamUser()->GetSteamID().GetAccountID()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":478
 * 
 * 
 * def get_account_id():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_renpysteam.get_account_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":490
 * ticket = None
 * 
 * def get_session_ticket():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_55get_session_ticket(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_54get_session_ticket[] = "\n    :doc: steam_user\n\n    Gets a ticket that can be sent to the server to authenticate this user.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_55get_session_ticket = {"get_session_ticket", (PyCFunction)__pyx_pw_11_renpysteam_55get_session_ticket, METH_NOARGS, __pyx_doc_11_renpysteam_54get_session_ticket};
static PyObject *__pyx_pw_11_renpysteam_55get_session_ticket(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_session_ticket (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_54get_session_ticket(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_54get_session_ticket(CYTHON_UNUSED PyObject *__pyx_self) {
  char __pyx_v_ticket_buf[0x800];
  uint32 __pyx_v_ticket_len;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_session_ticket", 0);

  /* "_renpysteam.pyx":503
 *     cdef uint32 ticket_len
 * 
 *     if ticket is not None:             # <<<<<<<<<<<<<<
 *         return ticket
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ticket); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 != Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "_renpysteam.pyx":504
 * 
 *     if ticket is not None:
 *         return ticket             # <<<<<<<<<<<<<<
 * 
 *     h_ticket = SteamUser().GetAuthSessionTicket(ticket_buf, 2048, &ticket_len)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ticket); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "_renpysteam.pyx":503
 *     cdef uint32 ticket_len
 * 
 *     if ticket is not None:             # <<<<<<<<<<<<<<
 *         return ticket
 * 
 */
  }

  /* "_renpysteam.pyx":506
 *         return ticket
 * 
 *     h_ticket = SteamUser().GetAuthSessionTicket(ticket_buf, 2048, &ticket_len)             # <<<<<<<<<<<<<<
 * 
 *     if h_ticket:
 */
  __pyx_v_11_renpysteam_h_ticket = SteamUser()->GetAuthSessionTicket(__pyx_v_ticket_buf, 0x800, (&__pyx_v_ticket_len));

  /* "_renpysteam.pyx":508
 *     h_ticket = SteamUser().GetAuthSessionTicket(ticket_buf, 2048, &ticket_len)
 * 
 *     if h_ticket:             # <<<<<<<<<<<<<<
 *         ticket = ticket_buf[0:ticket_len]
 * 
 */
  __pyx_t_3 = (__pyx_v_11_renpysteam_h_ticket != 0);
  if (__pyx_t_3) {

    /* "_renpysteam.pyx":509
 * 
 *     if h_ticket:
 *         ticket = ticket_buf[0:ticket_len]             # <<<<<<<<<<<<<<
 * 
 *     return ticket
 */
    __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_ticket_buf) + 0, __pyx_v_ticket_len - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_ticket, __pyx_t_1) < 0) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_renpysteam.pyx":508
 *     h_ticket = SteamUser().GetAuthSessionTicket(ticket_buf, 2048, &ticket_len)
 * 
 *     if h_ticket:             # <<<<<<<<<<<<<<
 *         ticket = ticket_buf[0:ticket_len]
 * 
 */
  }

  /* "_renpysteam.pyx":511
 *         ticket = ticket_buf[0:ticket_len]
 * 
 *     return ticket             # <<<<<<<<<<<<<<
 * 
 * def cancel_ticket():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ticket); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":490
 * ticket = None
 * 
 * def get_session_ticket():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_renpysteam.get_session_ticket", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":513
 *     return ticket
 * 
 * def cancel_ticket():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_57cancel_ticket(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_56cancel_ticket[] = "\n    :doc: steam_user\n\n    Cancels the ticket returned by :func:`_renpysteam.get_session_ticket`.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_57cancel_ticket = {"cancel_ticket", (PyCFunction)__pyx_pw_11_renpysteam_57cancel_ticket, METH_NOARGS, __pyx_doc_11_renpysteam_56cancel_ticket};
static PyObject *__pyx_pw_11_renpysteam_57cancel_ticket(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_ticket (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_56cancel_ticket(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_56cancel_ticket(CYTHON_UNUSED PyObject *__pyx_self) {
  CYTHON_UNUSED PyObject *__pyx_v_ticket = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_ticket", 0);

  /* "_renpysteam.pyx":524
 *     global tocket
 * 
 *     SteamUser().CancelAuthTicket(h_ticket)             # <<<<<<<<<<<<<<
 * 
 *     h_ticket = 0
 */
  SteamUser()->CancelAuthTicket(__pyx_v_11_renpysteam_h_ticket);

  /* "_renpysteam.pyx":526
 *     SteamUser().CancelAuthTicket(h_ticket)
 * 
 *     h_ticket = 0             # <<<<<<<<<<<<<<
 *     ticket = None
 * 
 */
  __pyx_v_11_renpysteam_h_ticket = 0;

  /* "_renpysteam.pyx":527
 * 
 *     h_ticket = 0
 *     ticket = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_ticket = Py_None;

  /* "_renpysteam.pyx":513
 *     return ticket
 * 
 * def cancel_ticket():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XDECREF(__pyx_v_ticket);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":536
 * 
 * # Called periodically to run callbacks.
 * def periodic():             # <<<<<<<<<<<<<<
 *     SteamAPI_RunCallbacks()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_59periodic(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_11_renpysteam_59periodic = {"periodic", (PyCFunction)__pyx_pw_11_renpysteam_59periodic, METH_NOARGS, 0};
static PyObject *__pyx_pw_11_renpysteam_59periodic(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("periodic (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_58periodic(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_58periodic(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("periodic", 0);

  /* "_renpysteam.pyx":537
 * # Called periodically to run callbacks.
 * def periodic():
 *     SteamAPI_RunCallbacks()             # <<<<<<<<<<<<<<
 * 
 * # Initialize the Steam API.
 */
  SteamAPI_RunCallbacks();

  /* "_renpysteam.pyx":536
 * 
 * # Called periodically to run callbacks.
 * def periodic():             # <<<<<<<<<<<<<<
 *     SteamAPI_RunCallbacks()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_renpysteam.pyx":540
 * 
 * # Initialize the Steam API.
 * def init():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam
 */

/* Python wrapper */
static PyObject *__pyx_pw_11_renpysteam_61init(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_11_renpysteam_60init[] = "\n    :doc: steam\n\n    Initializes the Steam API. Returns true for success, false for failure.\n    If a failure has occurred, no other steam functions should be called.\n\n    This may be called multiple times, but only attempts initialization the\n    first time it's been called.\n    ";
static PyMethodDef __pyx_mdef_11_renpysteam_61init = {"init", (PyCFunction)__pyx_pw_11_renpysteam_61init, METH_NOARGS, __pyx_doc_11_renpysteam_60init};
static PyObject *__pyx_pw_11_renpysteam_61init(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  __pyx_r = __pyx_pf_11_renpysteam_60init(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11_renpysteam_60init(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init", 0);

  /* "_renpysteam.pyx":553
 *     global initialized
 * 
 *     if initialized is None:             # <<<<<<<<<<<<<<
 *         initialized = SteamAPI_Init()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_initialized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "_renpysteam.pyx":554
 * 
 *     if initialized is None:
 *         initialized = SteamAPI_Init()             # <<<<<<<<<<<<<<
 * 
 *         if initialized:
 */
    __pyx_t_1 = __Pyx_PyBool_FromLong(SteamAPI_Init()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_initialized, __pyx_t_1) < 0) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "_renpysteam.pyx":556
 *         initialized = SteamAPI_Init()
 * 
 *         if initialized:             # <<<<<<<<<<<<<<
 *             renpy.config.periodic_callbacks.append(periodic)
 *             renpy.config.needs_redraw_callbacks.append(overlay_needs_present)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_initialized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "_renpysteam.pyx":557
 * 
 *         if initialized:
 *             renpy.config.periodic_callbacks.append(periodic)             # <<<<<<<<<<<<<<
 *             renpy.config.needs_redraw_callbacks.append(overlay_needs_present)
 *             set_overlay_notification_position(POSITION_TOP_RIGHT)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_renpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_config); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_periodic_callbacks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_periodic); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 557, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_Append(__pyx_t_1, __pyx_t_4); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 557, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "_renpysteam.pyx":558
 *         if initialized:
 *             renpy.config.periodic_callbacks.append(periodic)
 *             renpy.config.needs_redraw_callbacks.append(overlay_needs_present)             # <<<<<<<<<<<<<<
 *             set_overlay_notification_position(POSITION_TOP_RIGHT)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_renpy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_config); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_needs_redraw_callbacks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_overlay_needs_present); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_Append(__pyx_t_4, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 558, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_renpysteam.pyx":559
 *             renpy.config.periodic_callbacks.append(periodic)
 *             renpy.config.needs_redraw_callbacks.append(overlay_needs_present)
 *             set_overlay_notification_position(POSITION_TOP_RIGHT)             # <<<<<<<<<<<<<<
 * 
 *     return initialized
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_set_overlay_notification_positio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_POSITION_TOP_RIGHT); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 559, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "_renpysteam.pyx":556
 *         initialized = SteamAPI_Init()
 * 
 *         if initialized:             # <<<<<<<<<<<<<<
 *             renpy.config.periodic_callbacks.append(periodic)
 *             renpy.config.needs_redraw_callbacks.append(overlay_needs_present)
 */
    }

    /* "_renpysteam.pyx":553
 *     global initialized
 * 
 *     if initialized is None:             # <<<<<<<<<<<<<<
 *         initialized = SteamAPI_Init()
 * 
 */
  }

  /* "_renpysteam.pyx":561
 *             set_overlay_notification_position(POSITION_TOP_RIGHT)
 * 
 *     return initialized             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_initialized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_renpysteam.pyx":540
 * 
 * # Initialize the Steam API.
 * def init():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_renpysteam.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__renpysteam(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__renpysteam},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_renpysteam",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_POSITION_BOTTOM_LEFT, __pyx_k_POSITION_BOTTOM_LEFT, sizeof(__pyx_k_POSITION_BOTTOM_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_POSITION_BOTTOM_RIGHT, __pyx_k_POSITION_BOTTOM_RIGHT, sizeof(__pyx_k_POSITION_BOTTOM_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_POSITION_TOP_LEFT, __pyx_k_POSITION_TOP_LEFT, sizeof(__pyx_k_POSITION_TOP_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_POSITION_TOP_RIGHT, __pyx_k_POSITION_TOP_RIGHT, sizeof(__pyx_k_POSITION_TOP_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_STORE_ADD_TO_CART, __pyx_k_STORE_ADD_TO_CART, sizeof(__pyx_k_STORE_ADD_TO_CART), 0, 0, 1, 1},
  {&__pyx_n_s_STORE_ADD_TO_CART_AND_SHOW, __pyx_k_STORE_ADD_TO_CART_AND_SHOW, sizeof(__pyx_k_STORE_ADD_TO_CART_AND_SHOW), 0, 0, 1, 1},
  {&__pyx_n_s_STORE_NONE, __pyx_k_STORE_NONE, sizeof(__pyx_k_STORE_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_activate_overlay, __pyx_k_activate_overlay, sizeof(__pyx_k_activate_overlay), 0, 0, 1, 1},
  {&__pyx_n_s_activate_overlay_to_store, __pyx_k_activate_overlay_to_store, sizeof(__pyx_k_activate_overlay_to_store), 0, 0, 1, 1},
  {&__pyx_n_s_activate_overlay_to_web_page, __pyx_k_activate_overlay_to_web_page, sizeof(__pyx_k_activate_overlay_to_web_page), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_appid, __pyx_k_appid, sizeof(__pyx_k_appid), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_ticket, __pyx_k_cancel_ticket, sizeof(__pyx_k_cancel_ticket), 0, 0, 1, 1},
  {&__pyx_n_s_clear_achievement, __pyx_k_clear_achievement, sizeof(__pyx_k_clear_achievement), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_config, __pyx_k_config, sizeof(__pyx_k_config), 0, 0, 1, 1},
  {&__pyx_n_s_cur_progress, __pyx_k_cur_progress, sizeof(__pyx_k_cur_progress), 0, 0, 1, 1},
  {&__pyx_n_s_dialog, __pyx_k_dialog, sizeof(__pyx_k_dialog), 0, 0, 1, 1},
  {&__pyx_n_s_dlc_installed, __pyx_k_dlc_installed, sizeof(__pyx_k_dlc_installed), 0, 0, 1, 1},
  {&__pyx_n_s_dlc_progress, __pyx_k_dlc_progress, sizeof(__pyx_k_dlc_progress), 0, 0, 1, 1},
  {&__pyx_n_s_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 0, 1, 1},
  {&__pyx_n_s_flag, __pyx_k_flag, sizeof(__pyx_k_flag), 0, 0, 1, 1},
  {&__pyx_n_s_get_account_id, __pyx_k_get_account_id, sizeof(__pyx_k_get_account_id), 0, 0, 1, 1},
  {&__pyx_n_s_get_achievement, __pyx_k_get_achievement, sizeof(__pyx_k_get_achievement), 0, 0, 1, 1},
  {&__pyx_n_s_get_current_beta_name, __pyx_k_get_current_beta_name, sizeof(__pyx_k_get_current_beta_name), 0, 0, 1, 1},
  {&__pyx_n_s_get_current_game_language, __pyx_k_get_current_game_language, sizeof(__pyx_k_get_current_game_language), 0, 0, 1, 1},
  {&__pyx_n_s_get_float_stat, __pyx_k_get_float_stat, sizeof(__pyx_k_get_float_stat), 0, 0, 1, 1},
  {&__pyx_n_s_get_int_stat, __pyx_k_get_int_stat, sizeof(__pyx_k_get_int_stat), 0, 0, 1, 1},
  {&__pyx_n_s_get_persona_name, __pyx_k_get_persona_name, sizeof(__pyx_k_get_persona_name), 0, 0, 1, 1},
  {&__pyx_n_s_get_session_ticket, __pyx_k_get_session_ticket, sizeof(__pyx_k_get_session_ticket), 0, 0, 1, 1},
  {&__pyx_n_s_get_steam_ui_language, __pyx_k_get_steam_ui_language, sizeof(__pyx_k_get_steam_ui_language), 0, 0, 1, 1},
  {&__pyx_n_s_grant_achievement, __pyx_k_grant_achievement, sizeof(__pyx_k_grant_achievement), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indicate_achievement_progress, __pyx_k_indicate_achievement_progress, sizeof(__pyx_k_indicate_achievement_progress), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_initialized, __pyx_k_initialized, sizeof(__pyx_k_initialized), 0, 0, 1, 1},
  {&__pyx_n_s_install_dlc, __pyx_k_install_dlc, sizeof(__pyx_k_install_dlc), 0, 0, 1, 1},
  {&__pyx_n_s_is_overlay_enabled, __pyx_k_is_overlay_enabled, sizeof(__pyx_k_is_overlay_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_is_subscribed_app, __pyx_k_is_subscribed_app, sizeof(__pyx_k_is_subscribed_app), 0, 0, 1, 1},
  {&__pyx_n_s_list_achievements, __pyx_k_list_achievements, sizeof(__pyx_k_list_achievements), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_progress, __pyx_k_max_progress, sizeof(__pyx_k_max_progress), 0, 0, 1, 1},
  {&__pyx_n_s_na, __pyx_k_na, sizeof(__pyx_k_na), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_needs_redraw_callbacks, __pyx_k_needs_redraw_callbacks, sizeof(__pyx_k_needs_redraw_callbacks), 0, 0, 1, 1},
  {&__pyx_n_s_overlay_needs_present, __pyx_k_overlay_needs_present, sizeof(__pyx_k_overlay_needs_present), 0, 0, 1, 1},
  {&__pyx_n_s_periodic, __pyx_k_periodic, sizeof(__pyx_k_periodic), 0, 0, 1, 1},
  {&__pyx_n_s_periodic_callbacks, __pyx_k_periodic_callbacks, sizeof(__pyx_k_periodic_callbacks), 0, 0, 1, 1},
  {&__pyx_n_s_position, __pyx_k_position, sizeof(__pyx_k_position), 0, 0, 1, 1},
  {&__pyx_n_s_renpy, __pyx_k_renpy, sizeof(__pyx_k_renpy), 0, 0, 1, 1},
  {&__pyx_n_s_renpysteam, __pyx_k_renpysteam, sizeof(__pyx_k_renpysteam), 0, 0, 1, 1},
  {&__pyx_kp_s_renpysteam_pyx, __pyx_k_renpysteam_pyx, sizeof(__pyx_k_renpysteam_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_retrieve_stats, __pyx_k_retrieve_stats, sizeof(__pyx_k_retrieve_stats), 0, 0, 1, 1},
  {&__pyx_n_s_rv, __pyx_k_rv, sizeof(__pyx_k_rv), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_set_float_stat, __pyx_k_set_float_stat, sizeof(__pyx_k_set_float_stat), 0, 0, 1, 1},
  {&__pyx_n_s_set_int_stat, __pyx_k_set_int_stat, sizeof(__pyx_k_set_int_stat), 0, 0, 1, 1},
  {&__pyx_n_s_set_overlay_notification_positio, __pyx_k_set_overlay_notification_positio, sizeof(__pyx_k_set_overlay_notification_positio), 0, 0, 1, 1},
  {&__pyx_n_s_store_stats, __pyx_k_store_stats, sizeof(__pyx_k_store_stats), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_ticket, __pyx_k_ticket, sizeof(__pyx_k_ticket), 0, 0, 1, 1},
  {&__pyx_n_s_ticket_buf, __pyx_k_ticket_buf, sizeof(__pyx_k_ticket_buf), 0, 0, 1, 1},
  {&__pyx_n_s_ticket_len, __pyx_k_ticket_len, sizeof(__pyx_k_ticket_len), 0, 0, 1, 1},
  {&__pyx_n_s_total, __pyx_k_total, sizeof(__pyx_k_total), 0, 0, 1, 1},
  {&__pyx_n_s_uninstall_dlc, __pyx_k_uninstall_dlc, sizeof(__pyx_k_uninstall_dlc), 0, 0, 1, 1},
  {&__pyx_n_s_url, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "_renpysteam.pyx":144
 * #     new SteamCallback[UserStatsReceived_t](call_got_stats)
 * 
 * def retrieve_stats():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_retrieve_stats, 144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 144, __pyx_L1_error)

  /* "_renpysteam.pyx":160
 *     SteamUserStats().RequestCurrentStats()
 * 
 * def store_stats():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_store_stats, 160, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 160, __pyx_L1_error)

  /* "_renpysteam.pyx":169
 *     SteamUserStats().StoreStats()
 * 
 * def list_achievements():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__4 = PyTuple_Pack(4, __pyx_n_s_rv, __pyx_n_s_na, __pyx_n_s_s, __pyx_n_s_i); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_list_achievements, 169, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 169, __pyx_L1_error)

  /* "_renpysteam.pyx":188
 *     return rv
 * 
 * def get_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_rv); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_achievement, 188, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 188, __pyx_L1_error)

  /* "_renpysteam.pyx":204
 *     return rv
 * 
 * def grant_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_s_name); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_grant_achievement, 204, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 204, __pyx_L1_error)

  /* "_renpysteam.pyx":214
 *     return SteamUserStats().SetAchievement(name)
 * 
 * def clear_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_name); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_clear_achievement, 214, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 214, __pyx_L1_error)

  /* "_renpysteam.pyx":224
 *     return SteamUserStats().ClearAchievement(name)
 * 
 * def indicate_achievement_progress(name, cur_progress, max_progress):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__12 = PyTuple_Pack(3, __pyx_n_s_name, __pyx_n_s_cur_progress, __pyx_n_s_max_progress); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_indicate_achievement_progress, 224, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 224, __pyx_L1_error)

  /* "_renpysteam.pyx":234
 *     return SteamUserStats().IndicateAchievementProgress(name, cur_progress, max_progress)
 * 
 * def get_float_stat(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_rv); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_float_stat, 234, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 234, __pyx_L1_error)

  /* "_renpysteam.pyx":249
 *     return rv
 * 
 * def set_float_stat(name, value):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__16 = PyTuple_Pack(3, __pyx_n_s_name, __pyx_n_s_value, __pyx_n_s_v); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_set_float_stat, 249, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 249, __pyx_L1_error)

  /* "_renpysteam.pyx":262
 *     return SteamUserStats().SetStat(<char *> name, v)
 * 
 * def get_int_stat(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_name, __pyx_n_s_rv); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_int_stat, 262, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 262, __pyx_L1_error)

  /* "_renpysteam.pyx":277
 *     return rv
 * 
 * def set_int_stat(name, value):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_tuple__20 = PyTuple_Pack(3, __pyx_n_s_name, __pyx_n_s_value, __pyx_n_s_v); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_set_int_stat, 277, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 277, __pyx_L1_error)

  /* "_renpysteam.pyx":293
 * ########################################################################### Apps
 * 
 * def is_subscribed_app(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_appid); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_is_subscribed_app, 293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 293, __pyx_L1_error)

  /* "_renpysteam.pyx":302
 *     return SteamApps().BIsSubscribedApp(appid)
 * 
 * def get_current_game_language():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_s); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_current_game_language, 302, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 302, __pyx_L1_error)

  /* "_renpysteam.pyx":312
 *     return str(s)
 * 
 * def get_steam_ui_language():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_s); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_steam_ui_language, 312, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 312, __pyx_L1_error)

  /* "_renpysteam.pyx":322
 *     return str(s)
 * 
 * def get_current_beta_name():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_n_s_rv); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_current_beta_name, 322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 322, __pyx_L1_error)

  /* "_renpysteam.pyx":336
 *     return str(rv)
 * 
 * def dlc_installed(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_n_s_appid); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_dlc_installed, 336, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 336, __pyx_L1_error)

  /* "_renpysteam.pyx":345
 *     return SteamApps().BIsDlcInstalled(appid)
 * 
 * def install_dlc(appid): # , callback):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_n_s_appid); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_install_dlc, 345, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 345, __pyx_L1_error)

  /* "_renpysteam.pyx":360
 *     SteamApps().InstallDLC(appid)
 * 
 * def uninstall_dlc(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_s_appid); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_uninstall_dlc, 360, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 360, __pyx_L1_error)

  /* "_renpysteam.pyx":369
 *     SteamApps().UninstallDLC(appid)
 * 
 * def dlc_progress(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_tuple__36 = PyTuple_Pack(3, __pyx_n_s_appid, __pyx_n_s_done, __pyx_n_s_total); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_dlc_progress, 369, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 369, __pyx_L1_error)

  /* "_renpysteam.pyx":388
 * ######################################################################## Overlay
 * 
 * def is_overlay_enabled():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_is_overlay_enabled, 388, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 388, __pyx_L1_error)

  /* "_renpysteam.pyx":398
 *     return SteamUtils().IsOverlayEnabled()
 * 
 * def overlay_needs_present():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_overlay_needs_present, 398, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 398, __pyx_L1_error)

  /* "_renpysteam.pyx":414
 * POSITION_BOTTOM_RIGHT = k_EPositionBottomRight
 * 
 * def set_overlay_notification_position(position):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_n_s_position); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_set_overlay_notification_positio, 414, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 414, __pyx_L1_error)

  /* "_renpysteam.pyx":425
 *     SteamUtils().SetOverlayNotificationPosition(position)
 * 
 * def activate_overlay(dialog):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_n_s_dialog); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_activate_overlay, 425, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 425, __pyx_L1_error)

  /* "_renpysteam.pyx":438
 *     SteamFriends().ActivateGameOverlay(dialog)
 * 
 * def activate_overlay_to_web_page(url):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_n_s_url); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_activate_overlay_to_web_page, 438, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 438, __pyx_L1_error)

  /* "_renpysteam.pyx":451
 * STORE_ADD_TO_CART_AND_SHOW = k_EOverlayToStoreFlag_AddToCartAndShow
 * 
 * def activate_overlay_to_store(appid, flag=STORE_NONE):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_appid, __pyx_n_s_flag); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_activate_overlay_to_store, 451, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 451, __pyx_L1_error)

  /* "_renpysteam.pyx":468
 * ########################################################################### User
 * 
 * def get_persona_name():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_persona_name, 468, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 468, __pyx_L1_error)

  /* "_renpysteam.pyx":478
 * 
 * 
 * def get_account_id():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_account_id, 478, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 478, __pyx_L1_error)

  /* "_renpysteam.pyx":490
 * ticket = None
 * 
 * def get_session_ticket():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_ticket_buf, __pyx_n_s_ticket_len); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_get_session_ticket, 490, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 490, __pyx_L1_error)

  /* "_renpysteam.pyx":513
 *     return ticket
 * 
 * def cancel_ticket():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_n_s_ticket); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_cancel_ticket, 513, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 513, __pyx_L1_error)

  /* "_renpysteam.pyx":536
 * 
 * # Called periodically to run callbacks.
 * def periodic():             # <<<<<<<<<<<<<<
 *     SteamAPI_RunCallbacks()
 * 
 */
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_periodic, 536, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 536, __pyx_L1_error)

  /* "_renpysteam.pyx":540
 * 
 * # Initialize the Steam API.
 * def init():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam
 */
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_renpysteam_pyx, __pyx_n_s_init, 540, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_renpysteam(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_renpysteam(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__renpysteam(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__renpysteam(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__renpysteam(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_renpysteam' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__renpysteam(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_renpysteam", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main__renpysteam) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "_renpysteam")) {
      if (unlikely(PyDict_SetItemString(modules, "_renpysteam", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "_renpysteam.pyx":24
 * from __future__ import print_function
 * 
 * version = 2             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "steam/steam_api.h":
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_int_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)

  /* "_renpysteam.pyx":130
 *         SteamCallback(void (*)(T *))
 * 
 * import renpy             # <<<<<<<<<<<<<<
 * 
 * ######################################################### Stats and Achievements
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_renpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_renpy, __pyx_t_1) < 0) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":144
 * #     new SteamCallback[UserStatsReceived_t](call_got_stats)
 * 
 * def retrieve_stats():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_1retrieve_stats, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_retrieve_stats, __pyx_t_1) < 0) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":160
 *     SteamUserStats().RequestCurrentStats()
 * 
 * def store_stats():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_3store_stats, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_store_stats, __pyx_t_1) < 0) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":169
 *     SteamUserStats().StoreStats()
 * 
 * def list_achievements():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_5list_achievements, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_achievements, __pyx_t_1) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":188
 *     return rv
 * 
 * def get_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_7get_achievement, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_achievement, __pyx_t_1) < 0) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":204
 *     return rv
 * 
 * def grant_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_9grant_achievement, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_grant_achievement, __pyx_t_1) < 0) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":214
 *     return SteamUserStats().SetAchievement(name)
 * 
 * def clear_achievement(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_11clear_achievement, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_clear_achievement, __pyx_t_1) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":224
 *     return SteamUserStats().ClearAchievement(name)
 * 
 * def indicate_achievement_progress(name, cur_progress, max_progress):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_13indicate_achievement_progress, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_indicate_achievement_progress, __pyx_t_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":234
 *     return SteamUserStats().IndicateAchievementProgress(name, cur_progress, max_progress)
 * 
 * def get_float_stat(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_15get_float_stat, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_float_stat, __pyx_t_1) < 0) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":249
 *     return rv
 * 
 * def set_float_stat(name, value):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_17set_float_stat, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_float_stat, __pyx_t_1) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":262
 *     return SteamUserStats().SetStat(<char *> name, v)
 * 
 * def get_int_stat(name):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_19get_int_stat, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_int_stat, __pyx_t_1) < 0) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":277
 *     return rv
 * 
 * def set_int_stat(name, value):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_stats
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_21set_int_stat, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_int_stat, __pyx_t_1) < 0) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":293
 * ########################################################################### Apps
 * 
 * def is_subscribed_app(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_23is_subscribed_app, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_subscribed_app, __pyx_t_1) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":302
 *     return SteamApps().BIsSubscribedApp(appid)
 * 
 * def get_current_game_language():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_25get_current_game_language, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_current_game_language, __pyx_t_1) < 0) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":312
 *     return str(s)
 * 
 * def get_steam_ui_language():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_27get_steam_ui_language, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_steam_ui_language, __pyx_t_1) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":322
 *     return str(s)
 * 
 * def get_current_beta_name():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_29get_current_beta_name, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_current_beta_name, __pyx_t_1) < 0) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":336
 *     return str(rv)
 * 
 * def dlc_installed(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_31dlc_installed, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dlc_installed, __pyx_t_1) < 0) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":345
 *     return SteamApps().BIsDlcInstalled(appid)
 * 
 * def install_dlc(appid): # , callback):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_33install_dlc, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_install_dlc, __pyx_t_1) < 0) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":360
 *     SteamApps().InstallDLC(appid)
 * 
 * def uninstall_dlc(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_35uninstall_dlc, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_uninstall_dlc, __pyx_t_1) < 0) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":369
 *     SteamApps().UninstallDLC(appid)
 * 
 * def dlc_progress(appid):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_apps
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_37dlc_progress, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dlc_progress, __pyx_t_1) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":388
 * ######################################################################## Overlay
 * 
 * def is_overlay_enabled():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_39is_overlay_enabled, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_is_overlay_enabled, __pyx_t_1) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":398
 *     return SteamUtils().IsOverlayEnabled()
 * 
 * def overlay_needs_present():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_41overlay_needs_present, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_overlay_needs_present, __pyx_t_1) < 0) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":409
 * 
 * 
 * POSITION_TOP_LEFT = k_EPositionTopLeft             # <<<<<<<<<<<<<<
 * POSITION_TOP_RIGHT = k_EPositionTopRight
 * POSITION_BOTTOM_LEFT = k_EPositionBottomLeft
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__ENotificationPosition(k_EPositionTopLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POSITION_TOP_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":410
 * 
 * POSITION_TOP_LEFT = k_EPositionTopLeft
 * POSITION_TOP_RIGHT = k_EPositionTopRight             # <<<<<<<<<<<<<<
 * POSITION_BOTTOM_LEFT = k_EPositionBottomLeft
 * POSITION_BOTTOM_RIGHT = k_EPositionBottomRight
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__ENotificationPosition(k_EPositionTopRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POSITION_TOP_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":411
 * POSITION_TOP_LEFT = k_EPositionTopLeft
 * POSITION_TOP_RIGHT = k_EPositionTopRight
 * POSITION_BOTTOM_LEFT = k_EPositionBottomLeft             # <<<<<<<<<<<<<<
 * POSITION_BOTTOM_RIGHT = k_EPositionBottomRight
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__ENotificationPosition(k_EPositionBottomLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POSITION_BOTTOM_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":412
 * POSITION_TOP_RIGHT = k_EPositionTopRight
 * POSITION_BOTTOM_LEFT = k_EPositionBottomLeft
 * POSITION_BOTTOM_RIGHT = k_EPositionBottomRight             # <<<<<<<<<<<<<<
 * 
 * def set_overlay_notification_position(position):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__ENotificationPosition(k_EPositionBottomRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_POSITION_BOTTOM_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":414
 * POSITION_BOTTOM_RIGHT = k_EPositionBottomRight
 * 
 * def set_overlay_notification_position(position):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_43set_overlay_notification_position, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_overlay_notification_positio, __pyx_t_1) < 0) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":425
 *     SteamUtils().SetOverlayNotificationPosition(position)
 * 
 * def activate_overlay(dialog):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_45activate_overlay, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_activate_overlay, __pyx_t_1) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":438
 *     SteamFriends().ActivateGameOverlay(dialog)
 * 
 * def activate_overlay_to_web_page(url):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_47activate_overlay_to_web_page, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_activate_overlay_to_web_page, __pyx_t_1) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":447
 *     SteamFriends().ActivateGameOverlayToWebPage(url)
 * 
 * STORE_NONE = k_EOverlayToStoreFlag_None             # <<<<<<<<<<<<<<
 * STORE_ADD_TO_CART = k_EOverlayToStoreFlag_AddToCart
 * STORE_ADD_TO_CART_AND_SHOW = k_EOverlayToStoreFlag_AddToCartAndShow
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EOverlayToStoreFlag(k_EOverlayToStoreFlag_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STORE_NONE, __pyx_t_1) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":448
 * 
 * STORE_NONE = k_EOverlayToStoreFlag_None
 * STORE_ADD_TO_CART = k_EOverlayToStoreFlag_AddToCart             # <<<<<<<<<<<<<<
 * STORE_ADD_TO_CART_AND_SHOW = k_EOverlayToStoreFlag_AddToCartAndShow
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EOverlayToStoreFlag(k_EOverlayToStoreFlag_AddToCart); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STORE_ADD_TO_CART, __pyx_t_1) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":449
 * STORE_NONE = k_EOverlayToStoreFlag_None
 * STORE_ADD_TO_CART = k_EOverlayToStoreFlag_AddToCart
 * STORE_ADD_TO_CART_AND_SHOW = k_EOverlayToStoreFlag_AddToCartAndShow             # <<<<<<<<<<<<<<
 * 
 * def activate_overlay_to_store(appid, flag=STORE_NONE):
 */
  __pyx_t_1 = __Pyx_PyInt_From_enum__EOverlayToStoreFlag(k_EOverlayToStoreFlag_AddToCartAndShow); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_STORE_ADD_TO_CART_AND_SHOW, __pyx_t_1) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":451
 * STORE_ADD_TO_CART_AND_SHOW = k_EOverlayToStoreFlag_AddToCartAndShow
 * 
 * def activate_overlay_to_store(appid, flag=STORE_NONE):             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_overlay
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_STORE_NONE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_ = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_49activate_overlay_to_store, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_activate_overlay_to_store, __pyx_t_1) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":468
 * ########################################################################### User
 * 
 * def get_persona_name():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_51get_persona_name, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_persona_name, __pyx_t_1) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":478
 * 
 * 
 * def get_account_id():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_53get_account_id, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_account_id, __pyx_t_1) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":487
 *     return SteamUser().GetSteamID().GetAccountID()
 * 
 * cdef HAuthTicket h_ticket = 0             # <<<<<<<<<<<<<<
 * ticket = None
 * 
 */
  __pyx_v_11_renpysteam_h_ticket = 0;

  /* "_renpysteam.pyx":488
 * 
 * cdef HAuthTicket h_ticket = 0
 * ticket = None             # <<<<<<<<<<<<<<
 * 
 * def get_session_ticket():
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ticket, Py_None) < 0) __PYX_ERR(0, 488, __pyx_L1_error)

  /* "_renpysteam.pyx":490
 * ticket = None
 * 
 * def get_session_ticket():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_55get_session_ticket, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_session_ticket, __pyx_t_1) < 0) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":513
 *     return ticket
 * 
 * def cancel_ticket():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam_user
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_57cancel_ticket, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cancel_ticket, __pyx_t_1) < 0) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":533
 * 
 * # Have we been initialized?
 * initialized = None             # <<<<<<<<<<<<<<
 * 
 * # Called periodically to run callbacks.
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initialized, Py_None) < 0) __PYX_ERR(0, 533, __pyx_L1_error)

  /* "_renpysteam.pyx":536
 * 
 * # Called periodically to run callbacks.
 * def periodic():             # <<<<<<<<<<<<<<
 *     SteamAPI_RunCallbacks()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_59periodic, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_periodic, __pyx_t_1) < 0) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":540
 * 
 * # Initialize the Steam API.
 * def init():             # <<<<<<<<<<<<<<
 *     """
 *     :doc: steam
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11_renpysteam_61init, NULL, __pyx_n_s_renpysteam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_init, __pyx_t_1) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_renpysteam.pyx":1
 * # Copyright 2004-2020 Tom Rothamel <pytom@bishoujo.us>             # <<<<<<<<<<<<<<
 * #
 * # Permission is hereby granted, free of charge, to any person
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init _renpysteam", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _renpysteam");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__ENotificationPosition(enum ENotificationPosition value) {
    const enum ENotificationPosition neg_one = (enum ENotificationPosition) ((enum ENotificationPosition) 0 - (enum ENotificationPosition) 1), const_zero = (enum ENotificationPosition) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum ENotificationPosition) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum ENotificationPosition) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum ENotificationPosition) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum ENotificationPosition) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum ENotificationPosition) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum ENotificationPosition),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__EOverlayToStoreFlag(enum EOverlayToStoreFlag value) {
    const enum EOverlayToStoreFlag neg_one = (enum EOverlayToStoreFlag) ((enum EOverlayToStoreFlag) 0 - (enum EOverlayToStoreFlag) 1), const_zero = (enum EOverlayToStoreFlag) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum EOverlayToStoreFlag) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum EOverlayToStoreFlag) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum EOverlayToStoreFlag) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum EOverlayToStoreFlag) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum EOverlayToStoreFlag) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum EOverlayToStoreFlag),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32(int32 value) {
    const int32 neg_one = (int32) ((int32) 0 - (int32) 1), const_zero = (int32) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int32) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int32) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int32),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64(uint64 value) {
    const uint64 neg_one = (uint64) ((uint64) 0 - (uint64) 1), const_zero = (uint64) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint64) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint64) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32(uint32 value) {
    const uint32 neg_one = (uint32) ((uint32) 0 - (uint32) 1), const_zero = (uint32) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(uint32) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(uint32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE uint32 __Pyx_PyInt_As_uint32(PyObject *x) {
    const uint32 neg_one = (uint32) ((uint32) 0 - (uint32) 1), const_zero = (uint32) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (uint32) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32) 0;
                case  1: __PYX_VERIFY_RETURN_INT(uint32, digit, digits[0])
                case 2:
                    if (8 * sizeof(uint32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) >= 2 * PyLong_SHIFT) {
                            return (uint32) (((((uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) >= 3 * PyLong_SHIFT) {
                            return (uint32) (((((((uint32)digits[2]) << PyLong_SHIFT) | (uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) >= 4 * PyLong_SHIFT) {
                            return (uint32) (((((((((uint32)digits[3]) << PyLong_SHIFT) | (uint32)digits[2]) << PyLong_SHIFT) | (uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (uint32) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(uint32) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (uint32) 0;
                case -1: __PYX_VERIFY_RETURN_INT(uint32, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(uint32,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(uint32) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32) (((uint32)-1)*(((((uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(uint32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) - 1 > 2 * PyLong_SHIFT) {
                            return (uint32) ((((((uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(uint32) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32) (((uint32)-1)*(((((((uint32)digits[2]) << PyLong_SHIFT) | (uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(uint32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) - 1 > 3 * PyLong_SHIFT) {
                            return (uint32) ((((((((uint32)digits[2]) << PyLong_SHIFT) | (uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(uint32) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32) (((uint32)-1)*(((((((((uint32)digits[3]) << PyLong_SHIFT) | (uint32)digits[2]) << PyLong_SHIFT) | (uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(uint32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(uint32) - 1 > 4 * PyLong_SHIFT) {
                            return (uint32) ((((((((((uint32)digits[3]) << PyLong_SHIFT) | (uint32)digits[2]) << PyLong_SHIFT) | (uint32)digits[1]) << PyLong_SHIFT) | (uint32)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(uint32) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(uint32) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(uint32, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32) -1;
        }
    } else {
        uint32 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (uint32) -1;
        val = __Pyx_PyInt_As_uint32(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to uint32");
    return (uint32) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to uint32");
    return (uint32) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int32 __Pyx_PyInt_As_int32(PyObject *x) {
    const int32 neg_one = (int32) ((int32) 0 - (int32) 1), const_zero = (int32) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32, digit, digits[0])
                case 2:
                    if (8 * sizeof(int32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) >= 2 * PyLong_SHIFT) {
                            return (int32) (((((int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) >= 3 * PyLong_SHIFT) {
                            return (int32) (((((((int32)digits[2]) << PyLong_SHIFT) | (int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) >= 4 * PyLong_SHIFT) {
                            return (int32) (((((((((int32)digits[3]) << PyLong_SHIFT) | (int32)digits[2]) << PyLong_SHIFT) | (int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int32) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int32, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int32,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int32) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) - 1 > 2 * PyLong_SHIFT) {
                            return (int32) (((int32)-1)*(((((int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) - 1 > 2 * PyLong_SHIFT) {
                            return (int32) ((((((int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int32) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) - 1 > 3 * PyLong_SHIFT) {
                            return (int32) (((int32)-1)*(((((((int32)digits[2]) << PyLong_SHIFT) | (int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) - 1 > 3 * PyLong_SHIFT) {
                            return (int32) ((((((((int32)digits[2]) << PyLong_SHIFT) | (int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int32) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) - 1 > 4 * PyLong_SHIFT) {
                            return (int32) (((int32)-1)*(((((((((int32)digits[3]) << PyLong_SHIFT) | (int32)digits[2]) << PyLong_SHIFT) | (int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32) - 1 > 4 * PyLong_SHIFT) {
                            return (int32) ((((((((((int32)digits[3]) << PyLong_SHIFT) | (int32)digits[2]) << PyLong_SHIFT) | (int32)digits[1]) << PyLong_SHIFT) | (int32)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int32) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32) -1;
        }
    } else {
        int32 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int32) -1;
        val = __Pyx_PyInt_As_int32(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32");
    return (int32) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32");
    return (int32) -1;
}

/* CIntFromPy */
static CYTHON_INLINE AppId_t __Pyx_PyInt_As_AppId_t(PyObject *x) {
    const AppId_t neg_one = (AppId_t) ((AppId_t) 0 - (AppId_t) 1), const_zero = (AppId_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(AppId_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(AppId_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (AppId_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (AppId_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(AppId_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(AppId_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) >= 2 * PyLong_SHIFT) {
                            return (AppId_t) (((((AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(AppId_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) >= 3 * PyLong_SHIFT) {
                            return (AppId_t) (((((((AppId_t)digits[2]) << PyLong_SHIFT) | (AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(AppId_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) >= 4 * PyLong_SHIFT) {
                            return (AppId_t) (((((((((AppId_t)digits[3]) << PyLong_SHIFT) | (AppId_t)digits[2]) << PyLong_SHIFT) | (AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (AppId_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(AppId_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(AppId_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(AppId_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(AppId_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (AppId_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(AppId_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(AppId_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(AppId_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) - 1 > 2 * PyLong_SHIFT) {
                            return (AppId_t) (((AppId_t)-1)*(((((AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(AppId_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) - 1 > 2 * PyLong_SHIFT) {
                            return (AppId_t) ((((((AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(AppId_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) - 1 > 3 * PyLong_SHIFT) {
                            return (AppId_t) (((AppId_t)-1)*(((((((AppId_t)digits[2]) << PyLong_SHIFT) | (AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(AppId_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) - 1 > 3 * PyLong_SHIFT) {
                            return (AppId_t) ((((((((AppId_t)digits[2]) << PyLong_SHIFT) | (AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(AppId_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) - 1 > 4 * PyLong_SHIFT) {
                            return (AppId_t) (((AppId_t)-1)*(((((((((AppId_t)digits[3]) << PyLong_SHIFT) | (AppId_t)digits[2]) << PyLong_SHIFT) | (AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(AppId_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(AppId_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(AppId_t) - 1 > 4 * PyLong_SHIFT) {
                            return (AppId_t) ((((((((((AppId_t)digits[3]) << PyLong_SHIFT) | (AppId_t)digits[2]) << PyLong_SHIFT) | (AppId_t)digits[1]) << PyLong_SHIFT) | (AppId_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(AppId_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(AppId_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(AppId_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(AppId_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            AppId_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (AppId_t) -1;
        }
    } else {
        AppId_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (AppId_t) -1;
        val = __Pyx_PyInt_As_AppId_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to AppId_t");
    return (AppId_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to AppId_t");
    return (AppId_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum ENotificationPosition __Pyx_PyInt_As_enum__ENotificationPosition(PyObject *x) {
    const enum ENotificationPosition neg_one = (enum ENotificationPosition) ((enum ENotificationPosition) 0 - (enum ENotificationPosition) 1), const_zero = (enum ENotificationPosition) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum ENotificationPosition) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum ENotificationPosition) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum ENotificationPosition) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum ENotificationPosition) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) >= 2 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) (((((enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum ENotificationPosition) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) >= 3 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) (((((((enum ENotificationPosition)digits[2]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum ENotificationPosition) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) >= 4 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) (((((((((enum ENotificationPosition)digits[3]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[2]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum ENotificationPosition) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum ENotificationPosition) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum ENotificationPosition, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum ENotificationPosition) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum ENotificationPosition, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum ENotificationPosition) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum ENotificationPosition,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum ENotificationPosition) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) - 1 > 2 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) (((enum ENotificationPosition)-1)*(((((enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum ENotificationPosition) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) - 1 > 2 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) ((((((enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum ENotificationPosition) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) - 1 > 3 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) (((enum ENotificationPosition)-1)*(((((((enum ENotificationPosition)digits[2]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum ENotificationPosition) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) - 1 > 3 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) ((((((((enum ENotificationPosition)digits[2]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum ENotificationPosition) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) - 1 > 4 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) (((enum ENotificationPosition)-1)*(((((((((enum ENotificationPosition)digits[3]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[2]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum ENotificationPosition) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum ENotificationPosition, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum ENotificationPosition) - 1 > 4 * PyLong_SHIFT) {
                            return (enum ENotificationPosition) ((((((((((enum ENotificationPosition)digits[3]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[2]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[1]) << PyLong_SHIFT) | (enum ENotificationPosition)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum ENotificationPosition) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum ENotificationPosition, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum ENotificationPosition) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum ENotificationPosition, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum ENotificationPosition val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum ENotificationPosition) -1;
        }
    } else {
        enum ENotificationPosition val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum ENotificationPosition) -1;
        val = __Pyx_PyInt_As_enum__ENotificationPosition(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum ENotificationPosition");
    return (enum ENotificationPosition) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum ENotificationPosition");
    return (enum ENotificationPosition) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum EOverlayToStoreFlag __Pyx_PyInt_As_enum__EOverlayToStoreFlag(PyObject *x) {
    const enum EOverlayToStoreFlag neg_one = (enum EOverlayToStoreFlag) ((enum EOverlayToStoreFlag) 0 - (enum EOverlayToStoreFlag) 1), const_zero = (enum EOverlayToStoreFlag) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum EOverlayToStoreFlag) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum EOverlayToStoreFlag) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum EOverlayToStoreFlag) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum EOverlayToStoreFlag) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) >= 2 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) (((((enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum EOverlayToStoreFlag) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) >= 3 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) (((((((enum EOverlayToStoreFlag)digits[2]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum EOverlayToStoreFlag) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) >= 4 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) (((((((((enum EOverlayToStoreFlag)digits[3]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[2]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum EOverlayToStoreFlag) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum EOverlayToStoreFlag) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum EOverlayToStoreFlag, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum EOverlayToStoreFlag) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum EOverlayToStoreFlag, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum EOverlayToStoreFlag) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 2 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) (((enum EOverlayToStoreFlag)-1)*(((((enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum EOverlayToStoreFlag) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 2 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) ((((((enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 3 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) (((enum EOverlayToStoreFlag)-1)*(((((((enum EOverlayToStoreFlag)digits[2]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum EOverlayToStoreFlag) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 3 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) ((((((((enum EOverlayToStoreFlag)digits[2]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 4 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) (((enum EOverlayToStoreFlag)-1)*(((((((((enum EOverlayToStoreFlag)digits[3]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[2]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum EOverlayToStoreFlag) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum EOverlayToStoreFlag, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum EOverlayToStoreFlag) - 1 > 4 * PyLong_SHIFT) {
                            return (enum EOverlayToStoreFlag) ((((((((((enum EOverlayToStoreFlag)digits[3]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[2]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[1]) << PyLong_SHIFT) | (enum EOverlayToStoreFlag)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum EOverlayToStoreFlag) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum EOverlayToStoreFlag, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum EOverlayToStoreFlag) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum EOverlayToStoreFlag, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum EOverlayToStoreFlag val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum EOverlayToStoreFlag) -1;
        }
    } else {
        enum EOverlayToStoreFlag val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum EOverlayToStoreFlag) -1;
        val = __Pyx_PyInt_As_enum__EOverlayToStoreFlag(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum EOverlayToStoreFlag");
    return (enum EOverlayToStoreFlag) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum EOverlayToStoreFlag");
    return (enum EOverlayToStoreFlag) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
